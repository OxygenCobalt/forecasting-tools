[
    {
        "name": "LaylapsBot",
        "description": "This benchmark ran the LaylapsBot bot on 100 questions.",
        "timestamp": "2025-03-21T01:20:53.829167",
        "time_taken_in_minutes": 0.000803681214650472,
        "total_cost": 0.0,
        "git_commit_hash": "2ef52be",
        "forecast_bot_config": {
            "research_used": "['exa']"
        },
        "code": "class LaylapsBot(Q1TemplateBot2025):\n    def __init__(self, research_used: list[str] | None = None, **kwargs):\n        super().__init__(**kwargs)\n        self.research_used = research_used or [\"exa\"]\n        print(f\"Using research: {self.research_used}\")\n\n    async def run_research(self, question: MetaculusQuestion) -> str:\n        research = []\n        if \"exa\" in self.research_used and os.getenv(\"EXA_API_KEY\"):\n            research.append(await self._call_exa_smart_searcher(question.question_text))\n        if \"perplexity\" in self.research_used and os.getenv(\"PERPLEXITY_API_KEY\"):\n            research.append(await self._call_perplexity(question.question_text))\n        if len(research) > 1:\n            return \"\\n\\n\".join(\n                [f\"Research Source {i+1}:\\n{re}\" for i, re in enumerate(research)]\n            )\n        if research:\n            return research[0]\n        raise ValueError(\n            \"No research done, did configure a valid research provider and API key?\"\n        )\n\n    async def _call_asknews(self, question_text: str) -> str:\n        async with _dumbAskNewsSema:\n            return await AskNewsSearcher.get_formatted_news(question_text)\n",
        "forecast_reports": []
    }
]
